<?php

namespace AppBundle\Controller;

use AppBundle\Entity\Projets;
use AppBundle\Form\ProjetsType;
use AppBundle\Repository\ProjetsRepository;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class AddProjetController extends Controller
{
    /**
     * @Route("/addprojets", name="addprojets")
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function newAction(Request $request)
    {
// creates a projets and gives it some dummy data for this example
        $projets = new Projets();

        $form = $this->createForm(ProjetsType::class, $projets);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $file = $projets->getImage();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('img_projets'),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $projets->setImage($fileName);

            // ... persist the $projets variable or any other work

            return $this->redirect($this->generateUrl('app_product_list'));
            $projets = $form->getData();
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($projets);
            $entityManager->flush();

            return $this->redirectToRoute('home');
        }

        return $this->render('Registration/addprojet.html.twig', array(
            'form' => $form->createView(),
        ));
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
     * @Route("/projets/{id}", name="projets")
     */
    public function AllProjets ($id)
    {
        $projets = $this->getDoctrine()
            ->getRepository(Projets::class)
            ->find($id);

        if (!$projets) {
            throw $this->createNotFoundException(
                'No product found for id '.$id
            );
        }

        return new Response('Check out this great product: '.$projets->getName());

        // or render a template
        // in the template, print things with {{ product.name }}
        // return $this->render('product/show.html.twig', ['product' => $product]);

    }

}